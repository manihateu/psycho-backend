// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum CourseTypes {
  КУРС
  МЕДИТАЦИЯ
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  // url = "postgres://neondb_owner:jB1HFo9TyPVn@ep-proud-hall-a2dz761y-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require"  //on migrations
}

model User {
  id            Int               @id @default(autoincrement())
  email         String            @unique
  name          String
  password      String
  role          Role              @default(USER)
  categories    Category[]        @relation("UserCategories")
  likedCourses  Course[]          @relation("UserLikedCourses")
  interactions  UserCourseInteraction[]
  notifications Notification[]
}

model Category {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  users       User[]              @relation("UserCategories")
  imageurl    String?
  bgcolor     String?
  courses     Course[]            @relation("CourseCategories")
} 

model Course {
  id              Int             @id @default(autoincrement())
  name            String  
  description     String 
  type            CourseTypes     @default(КУРС)
  timeFrom        Int          
  timeTo          Int
  cardLogoUrl     String
  cardLogoBgColor String
  cardBgUrl       String
  countLiked      Int             @default(0)
  countListened   Int             @default(0)
  categories      Category[]      @relation("CourseCategories")
  audioFiles      AudioFile[]     @relation("CourseAudioFiles")
  usersLiked      User[]          @relation("UserLikedCourses")
  interactions    UserCourseInteraction[]
}

model AudioFile {
  id          Int                  @id @default(autoincrement())
  name        String
  fileUrl     String
  duration    Int
  courses     Course[]             @relation("CourseAudioFiles")
}

model UserCourseInteraction {
  id              Int              @id @default(autoincrement())
  userId          Int
  courseId        Int
  interactionType InteractionType
  timestamp       DateTime         @default(now())

  user            User             @relation(fields: [userId], references: [id])
  course          Course           @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId, interactionType]) 
}

enum InteractionType {
  LIKE      
  STARTED    
  COMPLETED  
}

model Notification {
  id          Int                    @id @default(autoincrement())
  userId      Int      
  message     String   
  createdAt   DateTime               @default(now())
  isRead      Boolean                @default(false)
  user        User                   @relation(fields: [userId], references: [id])

  @@index([userId])
}